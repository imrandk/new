// Replace this with the actual selector for your button
const buttonSelector = '#zvksow01xfkaofl1Xxz3ccff8';

// Function to click the button
function clickButton() {
  const button = document.querySelector(buttonSelector);
  if (button) {
    button.click();
  } else {
    console.error('Button not found');
  }
}

// Click the button every 3 seconds (3000 milliseconds)
setInterval(clickButton, 3000);






(function() {
    // Initialize the global processed URLs variable if it doesn't exist
    if (!window.processedUrls) {
        window.processedUrls = JSON.parse(localStorage.getItem('processedUrls')) || [];
        console.log('Initialized processedUrls:', window.processedUrls); // Debug statement
    }

    function normalizeUrl(url) {
        // Create a temporary anchor element to parse the URL
        const a = document.createElement('a');
        a.href = url;
        // Return the normalized URL (without query parameters and fragments)
        return a.protocol + '//' + a.host + a.pathname;
    }

    function downloadImage() {
        console.log('Attempting to download image...'); // Debug statement

        // Select the image element using the provided CSS selector
        const image = document.querySelector('.mantine-focus-auto.m_87cf2631 img'); // Adjust the selector as needed

        // Check if the image element exists
        if (image) {
            const imageUrl = image.src;
            const normalizedUrl = normalizeUrl(imageUrl);

            console.log('Image URL:', imageUrl); // Debug statement
            console.log('Normalized URL:', normalizedUrl); // Debug statement

            // Check if the normalized URL has already been processed
            if (!window.processedUrls.includes(normalizedUrl)) {
                console.log('Downloading new image:', normalizedUrl); // Debug statement

                const filename = normalizedUrl.substring(normalizedUrl.lastIndexOf('/') + 1); // Extract filename from URL

                // Fetch the image data
                fetch(imageUrl)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.blob();
                    })
                    .then(blob => {
                        // Create a temporary anchor element to trigger the download
                        const link = document.createElement('a');
                        link.href = URL.createObjectURL(blob);
                        link.download = filename;
                        link.style.display = 'none';

                        // Append the anchor element to the document body
                        document.body.appendChild(link);

                        // Trigger the download
                        link.click();

                        // Clean up by removing the anchor element
                        document.body.removeChild(link);

                        // Add the normalized URL to the list of processed URLs
                        window.processedUrls.push(normalizedUrl);

                        console.log('Updated processedUrls:', window.processedUrls); // Debug statement

                        // Save the updated list of processed URLs to local storage
                        localStorage.setItem('processedUrls', JSON.stringify(window.processedUrls));
                    })
                    .catch(error => {
                        console.error('Error downloading image:', error); // Debug statement
                    });
            } else {
                console.log('Image already downloaded:', normalizedUrl); // Debug statement
            }
        } else {
            console.log('Image element not found'); // Debug statement
        }
    }

    // Call the function initially
    downloadImage();

    // Call the function every 2 seconds (2000 milliseconds)
    setInterval(downloadImage, 2000);
})();
