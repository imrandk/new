// Button selector and XPath for the SVG element
const btnSel = '.m_82577fc2 .mantine-focus-auto';
const svgXPath = "//button[contains(@class, 'mantine-focus-auto')]//svg";

// Function to click the button if SVG is not found
function clickButton() {
  const btn = document.querySelector(btnSel);
  const svg = document.evaluate(svgXPath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
  if (btn && !svg) btn.click();
}

// Click the button every 2 seconds
setInterval(clickButton, 2000);




// Clear console every 10 minutes
setInterval(() => console.clear(), 600000);




setInterval(function() {
    const button = document.querySelector('.m_c0783ff9 > div > .m_4081bf90 > .mantine-focus-auto:nth-child(1) .m_811560b9:nth-child(2)');
    if (button) {
        button.click();
    }
}, 60000);  // 60000 milliseconds = 1 minute






// Function to remove elements with specific classes
function removeElements() {
    ['.m_e615b15f', '.m_e615b15f.mage-Card-root.m_1b7284a3.mage-Paper-root'].forEach(selector => 
        document.querySelector(selector)?.remove()
    );
}

// Call the function to remove specific elements
removeElements();

// Delay function
const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

// Function to execute removals with delays
async function removeWithDelays() {
    for (const selector of [
        '.m_7485cace > .m_6d731127 > div:nth-child(3)',
		'.m_6d731127 > .m_e615b15f:nth-child(2)',
        '.m_7485cace > .m_6d731127 > .m_6d731127'
    ]) {
        await delay(100); // Adjust delay as needed
        document.querySelector(selector)?.remove();
    }
}

// Execute the removals with delays
removeWithDelays();

// Function to remove the image based on the provided selector
function removeImage() {
    document.querySelector('div:nth-child(3) > div > div > .mantine-focus-auto img')?.remove();
}

// Create a MutationObserver to watch for changes in the DOM
const observer = new MutationObserver(removeImage);

// Start observing the document body for changes
observer.observe(document.body, { childList: true, subtree: true });

// Call removeImage immediately to catch any existing image
removeImage();









// Initialize global processed URLs if not exist
if (!window.processedUrls) window.processedUrls = JSON.parse(localStorage.getItem('processedUrls')) || [];

// Normalize URL (without query parameters/fragments)
const normalizeUrl = url => new URL(url).origin + new URL(url).pathname;

// Function to download the cropped and resized image
function downloadAndCropImage() {
  const img = document.querySelector('.m_6d731127 > div:nth-child(2) > div > div:nth-child(1) > .mantine-focus-auto:nth-child(1) img');
  if (img) {
    const imgUrl = img.src;
    const normalizedUrl = normalizeUrl(imgUrl);
    
    if (!window.processedUrls.includes(normalizedUrl)) {
      const filename = normalizedUrl.split('/').pop();
      fetch(imgUrl)
        .then(res => res.ok ? res.blob() : Promise.reject())
        .then(blob => {
          const imgElement = new Image();
          imgElement.src = URL.createObjectURL(blob);

          imgElement.onload = () => {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');

            // Set the desired cropping and canvas dimensions
            const cropHeight = 40;  // Adjust this based on the watermark height
            const width = imgElement.width;
            const height = imgElement.height - cropHeight;  // Crop from the bottom

            // Set canvas size
            canvas.width = width;
            canvas.height = height;

            // Draw the cropped image onto the canvas
            ctx.drawImage(imgElement, 0, 0, width, height, 0, 0, width, height);

            // Convert the canvas to a blob for downloading
            canvas.toBlob(croppedBlob => {
              const link = document.createElement('a');
              link.href = URL.createObjectURL(croppedBlob);
              link.download = filename;
              link.style.display = 'none';
              document.body.appendChild(link);
              link.click();
              document.body.removeChild(link);

              // Add to processed URLs and save to local storage
              window.processedUrls.push(normalizedUrl);
              localStorage.setItem('processedUrls', JSON.stringify(window.processedUrls));
            }, 'image/jpeg');  // Save as JPEG
          };

          imgElement.onerror = () => {
            console.error('Failed to load the image for cropping.');
          };
        })
        .catch(() => { /* handle error silently */ });
    }
  }
}

// Download the cropped image every 2 seconds
downloadAndCropImage();
setInterval(downloadAndCropImage, 2000);
