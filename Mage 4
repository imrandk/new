// Selectors and data for the first button
const buttonSelector = '#zvksow01xfkaofl1Xxz3ccff8';
const svgXPath = '//*[@id="zvksow01xfkaofl1Xxz3ccff8"]/span/span[1]/svg';
const notificationSelector = '.mage-Notification-root';

// Function to check for the notification message
function isNotificationVisible() {
  const notification = document.querySelector(notificationSelector);
  if (notification) {
    const title = notification.querySelector('.mage-Notification-title');
    if (title && title.textContent.includes('Max Concurrency Reached')) {
      return true;
    }
  }
  return false;
}

// Function to click the first button if the SVG is not found
function clickFirstButton(callback) {
  if (isNotificationVisible()) return; // Skip if notification is present

  const button = document.querySelector(buttonSelector);
  if (button) {
    const svgElement = document.evaluate(svgXPath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
    if (!svgElement) {
      button.click();
      // Wait for button click action to be completed before proceeding
      setTimeout(callback, 1000); // Adjust delay as needed based on the action completion time
    } else {
      callback();
    }
  } else {
    callback();
  }
}

// Selectors and data for the second button
const svgSelector = '#zvksow01xfkaofl1Xxz3ccff8 svg[xmlns="http://www.w3.org/2000/svg"]';
const pathData = 'm96 448 320-192L96 64v384z';

// Function to check for the specific <path> element within the SVG
function checkPath() {
  const interval = setInterval(() => {
    if (isNotificationVisible()) {
      clearInterval(interval); // Stop checking if notification appears
      return;
    }

    const svg = document.querySelector(svgSelector);
    if (svg) {
      const paths = svg.getElementsByTagName('path');
      for (let path of paths) {
        if (path.getAttribute('d') === pathData) {
          clearInterval(interval);
          // Perform your action here if path is found
          // Restart the process after a 1-second interval
          setTimeout(() => clickFirstButton(checkPath), 1000);
          return;
        }
      }
    }
  }, 1000);
}

// Execute the process
clickFirstButton(checkPath);

// Image downloading function
(function() {
    // Initialize the global processed URLs variable if it doesn't exist
    if (!window.processedUrls) {
        window.processedUrls = JSON.parse(localStorage.getItem('processedUrls')) || [];
    }

    function normalizeUrl(url) {
        // Create a temporary anchor element to parse the URL
        const a = document.createElement('a');
        a.href = url;
        // Return the normalized URL (without query parameters and fragments)
        return a.protocol + '//' + a.host + a.pathname;
    }

    function downloadImage() {
        // Select the image element using the provided CSS selector
        const image = document.querySelector('.mantine-focus-auto.m_87cf2631 img'); // Adjust the selector as needed

        // Check if the image element exists
        if (image) {
            const imageUrl = image.src;
            const normalizedUrl = normalizeUrl(imageUrl);

            // Check if the normalized URL has already been processed
            if (!window.processedUrls.includes(normalizedUrl)) {
                const filename = normalizedUrl.substring(normalizedUrl.lastIndexOf('/') + 1); // Extract filename from URL

                // Fetch the image data
                fetch(imageUrl)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.blob();
                    })
                    .then(blob => {
                        // Create a temporary anchor element to trigger the download
                        const link = document.createElement('a');
                        link.href = URL.createObjectURL(blob);
                        link.download = filename;
                        link.style.display = 'none';

                        // Append the anchor element to the document body
                        document.body.appendChild(link);

                        // Trigger the download
                        link.click();

                        // Clean up by removing the anchor element
                        document.body.removeChild(link);

                        // Add the normalized URL to the list of processed URLs
                        window.processedUrls.push(normalizedUrl);

                        // Save the updated list of processed URLs to local storage
                        localStorage.setItem('processedUrls', JSON.stringify(window.processedUrls));
                    })
                    .catch(error => { /* handle error silently */ });
            }
        }
    }

    // Call the function initially
    downloadImage();

    // Call the function every 2 seconds (2000 milliseconds)
    setInterval(downloadImage, 2000);
})();
